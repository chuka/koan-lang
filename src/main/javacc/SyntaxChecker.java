/* Generated By:JavaCC: Do not edit this line. SyntaxChecker.java */
public class SyntaxChecker implements SyntaxCheckerConstants {
    public static void main(String[] args) {
        try {
            new SyntaxChecker(new java.io.StringReader(args[0])).S();
            System.out.println("Syntax is okay");
        } catch (Throwable e) {
            // Catching Throwable is ugly but JavaCC throws Error objects!
            System.out.println("Syntax check failed: " + e.getMessage());
        }
    }

  static final public void SCRIPT() throws ParseException {
    label_1:
    while (true) {
      STMT();
      jj_consume_token(BR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 5:
      case 24:
      case 25:
      case NUMTYPE:
      case STRTYPE:
      case BOOLTYPE:
      case FUNTYPE:
      case REGEXTYPE:
      case NULLTYPE:
      case INTLIT:
      case STRING:
      case CHARLIT:
      case 40:
      case 41:
      case 45:
      case 46:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
  }

  static final public void STMT() throws ParseException {
    if (jj_2_1(6)) {
      DEC();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHARLIT:
        ASSIGNMENT();
        break;
      case 40:
        PRINTSTMT();
        break;
      case 41:
        IFSTMT();
        break;
      case 25:
        LOOP();
        break;
      case 5:
      case 24:
      case INTLIT:
      case STRING:
      case 45:
      case 46:
        EXP();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void DEC() throws ParseException {
    if (jj_2_2(2)) {
      VARDEC();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMTYPE:
      case STRTYPE:
      case BOOLTYPE:
      case FUNTYPE:
      case REGEXTYPE:
      case NULLTYPE:
        CONSTDEC();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void VARDEC() throws ParseException {
    TYPE();
    ID();
    jj_consume_token(14);
    EXP();
  }

  static final public void CONSTDEC() throws ParseException {
    TYPE();
    ID();
    jj_consume_token(37);
    jj_consume_token(14);
    EXP();
  }

  static final public void TYPE() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMTYPE:
      jj_consume_token(NUMTYPE);
      break;
    case STRTYPE:
      jj_consume_token(STRTYPE);
      break;
    case BOOLTYPE:
      jj_consume_token(BOOLTYPE);
      break;
    case FUNTYPE:
      jj_consume_token(FUNTYPE);
      break;
    case REGEXTYPE:
      jj_consume_token(REGEXTYPE);
      break;
    case NULLTYPE:
      jj_consume_token(NULLTYPE);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void RETURNTYPE() throws ParseException {
    TYPE();
  }

  static final public void PARAMS() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 38:
      jj_consume_token(38);
      break;
    case CHARLIT:
      ID();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 21:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_2;
        }
        jj_consume_token(21);
        ID();
      }
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ASSIGNMENT() throws ParseException {
    if (jj_2_3(2)) {
      ID();
      jj_consume_token(14);
      EXP();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHARLIT:
        SWAP();
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void SWAP() throws ParseException {
    ID();
    jj_consume_token(39);
    ID();
  }

  static final public void PRINTSTMT() throws ParseException {
    jj_consume_token(40);
    EXP();
  }

  static final public void IFSTMT() throws ParseException {
    jj_consume_token(41);
    EXP();
    jj_consume_token(42);
    STMT();
    if (jj_2_4(2)) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 43:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      jj_consume_token(43);
      EXP();
      jj_consume_token(42);
      STMT();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 43:
      jj_consume_token(43);
      STMT();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(44);
  }

  static final public void LOOP() throws ParseException {
    if (jj_2_5(2)) {
      FORLOOP();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 25:
        INFINITELOOP();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void FORLOOP() throws ParseException {
    jj_consume_token(25);
    RANGE();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 24:
      ANONFUN();
      break;
    case CHARLIT:
      ID();
      BLOCK();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void INFINITELOOP() throws ParseException {
    jj_consume_token(25);
    BLOCK();
  }

  static final public void PROCCALL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHARLIT:
      ID();
      jj_consume_token(3);
      ARGS();
      jj_consume_token(4);
      break;
    case 24:
      ANONFUN();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void BLOCK() throws ParseException {
    jj_consume_token(7);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 5:
      case 24:
      case 25:
      case NUMTYPE:
      case STRTYPE:
      case BOOLTYPE:
      case FUNTYPE:
      case REGEXTYPE:
      case NULLTYPE:
      case INTLIT:
      case STRING:
      case CHARLIT:
      case 40:
      case 41:
      case 45:
      case 46:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
      STMT();
      jj_consume_token(BR);
    }
    jj_consume_token(8);
  }

  static final public void BOOL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 45:
      jj_consume_token(45);
      break;
    case 46:
      jj_consume_token(46);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void EXP() throws ParseException {
    EXP1();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
      jj_consume_token(16);
      EXP1();
    }
  }

  static final public void EXP1() throws ParseException {
    EXP2();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 15:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_6;
      }
      jj_consume_token(15);
      EXP2();
    }
  }

  static final public void EXP2() throws ParseException {
    EXP3();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
    case 18:
    case 19:
    case 20:
    case 47:
    case 48:
      RELOP();
      EXP3();
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
  }

  static final public void EXP3() throws ParseException {
    EXP4();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 13:
      EXPNOP();
      EXP4();
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
  }

  static final public void EXP4() throws ParseException {
    EXP5();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 11:
      case 12:
      case 49:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_7;
      }
      MULOP();
      EXP4();
    }
  }

  static final public void EXP5() throws ParseException {
    EXP6();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
      case 10:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_8;
      }
      ADDOP();
      EXP5();
    }
  }

  static final public void EXP6() throws ParseException {
    if (jj_2_6(5)) {
      LIT();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHARLIT:
        ID();
        break;
      case 5:
        ARRAY();
        break;
        OBJECT();
        break;
      case 24:
        PROCCALL();
        break;
        ARRAYREF();
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void RELOP() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 47:
      jj_consume_token(47);
      break;
    case 18:
      jj_consume_token(18);
      break;
    case 17:
      jj_consume_token(17);
      break;
    case 20:
      jj_consume_token(20);
      break;
    case 19:
      jj_consume_token(19);
      break;
    case 48:
      jj_consume_token(48);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void EXPNOP() throws ParseException {
    jj_consume_token(13);
  }

  static final public void MULOP() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 12:
      jj_consume_token(12);
      break;
    case 11:
      jj_consume_token(11);
      break;
    case 49:
      jj_consume_token(49);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ADDOP() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 10:
      jj_consume_token(10);
      break;
    case 9:
      jj_consume_token(9);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void LIT() throws ParseException {
    if (jj_2_7(3)) {
      BOOL();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTLIT:
        jj_consume_token(INTLIT);
        break;
      case STRING:
        jj_consume_token(STRING);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void ARRAY() throws ParseException {
    jj_consume_token(5);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 5:
      case 24:
      case INTLIT:
      case STRING:
      case CHARLIT:
      case 45:
      case 46:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_9;
      }
      EXP();
    }
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 21:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_10;
      }
      jj_consume_token(21);
      EXP();
    }
    jj_consume_token(6);
  }

  static final public void ARRAYREF() throws ParseException {
    ID();
    jj_consume_token(5);
    if (jj_2_8(3)) {
      EXP();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 5:
      case 22:
      case 23:
      case 24:
      case INTLIT:
      case STRING:
      case CHARLIT:
      case 45:
      case 46:
        RANGE();
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(6);
  }

  static final public void OBJECT() throws ParseException {
    ID();
    jj_consume_token(7);
    label_11:
    while (true) {
      ID();
      jj_consume_token(43);
      EXP();
      jj_consume_token(21);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHARLIT:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_11;
      }
    }
    jj_consume_token(8);
  }

  static final public void ANONFUN() throws ParseException {
    jj_consume_token(24);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHARLIT:
    case 38:
      PARAMS();
      jj_consume_token(26);
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    BLOCK();
  }

  static final public void REGEX() throws ParseException {
    ID();
    jj_consume_token(14);
    jj_consume_token(11);
    jj_consume_token(STRING);
    jj_consume_token(11);
  }

  static final public void ARGS() throws ParseException {
    EXP5();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 21:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_12;
      }
      jj_consume_token(21);
      EXP5();
    }
  }

  static final public void RANGE() throws ParseException {
    if (jj_2_9(4)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 23:
        jj_consume_token(23);
        break;
      case 22:
        jj_consume_token(22);
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      EXP();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 5:
      case 24:
      case INTLIT:
      case STRING:
      case CHARLIT:
      case 45:
      case 46:
        EXP();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 23:
          jj_consume_token(23);
          break;
        case 22:
          jj_consume_token(22);
          break;
        default:
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        EXP();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 23:
          jj_consume_token(23);
          break;
        case 22:
          jj_consume_token(22);
          break;
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        EXP();
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void ID() throws ParseException {
    label_13:
    while (true) {
      jj_consume_token(CHARLIT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHARLIT:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_13;
      }
    }
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
      case INTLIT:
      case CHARLIT:
      case 50:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_14;
      }
      if (jj_2_10(3)) {
        jj_consume_token(9);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 50:
          jj_consume_token(50);
          break;
        case CHARLIT:
          jj_consume_token(CHARLIT);
          break;
        case INTLIT:
          jj_consume_token(INTLIT);
          break;
        default:
          jj_la1[37] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public void HASH() throws ParseException {
    jj_consume_token(51);
    ID();
    jj_consume_token(52);
    EXP();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 21:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_15;
      }
      jj_consume_token(21);
      ID();
      jj_consume_token(52);
      EXP();
    }
    jj_consume_token(8);
  }

  static final public void S() throws ParseException {
    E();
    jj_consume_token(0);
  }

  static final public void E() throws ParseException {
    if (jj_2_11(2)) {
      ID();
      jj_consume_token(14);
      E();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 3:
      case INTLIT:
      case STRING:
      case CHARLIT:
      case BR:
        T();
        label_16:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 10:
            ;
            break;
          default:
            jj_la1[39] = jj_gen;
            break label_16;
          }
          jj_consume_token(10);
          T();
        }
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void T() throws ParseException {
    F();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 12:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_17;
      }
      jj_consume_token(12);
      F();
    }
  }

  static final public void F() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTLIT:
      jj_consume_token(INTLIT);
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    case CHARLIT:
      jj_consume_token(CHARLIT);
      break;
    case BR:
      jj_consume_token(BR);
      break;
    case 3:
      jj_consume_token(3);
      E();
      jj_consume_token(4);
      break;
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_3R_61() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(14)) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_scan_token(21)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    Token xsp;
    if (jj_scan_token(35)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(35)) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_27()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_3R_66()) return true;
    if (jj_scan_token(26)) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_scan_token(24)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(5)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(7)) return true;
    Token xsp;
    if (jj_3R_58()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_58()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_scan_token(9)) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_scan_token(5)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_56()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_57()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(6)) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_3R_63()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) return true;
    }
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) return true;
    }
    return false;
  }

  static private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_3R_51()) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_3R_45()) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_scan_token(13)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_40()) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(15)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(16)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_3R_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_44()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_41()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_42()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_83() {
    if (jj_scan_token(25)) return true;
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_3R_69()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_38()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_36()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(3)) return true;
    if (jj_3R_62()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_34()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_35()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_3R_55()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_29()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_30()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    }
    return false;
  }

  static private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) return true;
    }
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_scan_token(7)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_67()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(8)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(25)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_scan_token(21)) return true;
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_scan_token(40)) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_3R_20()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_70()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_82() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_81() {
    if (jj_3R_83()) return true;
    return false;
  }

  static private boolean jj_3R_79() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) return true;
    }
    return false;
  }

  static private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_scan_token(41)) return true;
    return false;
  }

  static private boolean jj_3R_80() {
    if (jj_3R_82()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_26()) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(37)) return true;
    if (jj_scan_token(14)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_26()) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(14)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) return true;
    }
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(14)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_3R_79()) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_3R_78()) return true;
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_3R_77()) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_3R_76()) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(0)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SyntaxCheckerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[43];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xfb000020,0x3000020,0xf8000000,0xf8000000,0x200000,0x0,0x0,0x0,0x0,0x2000000,0x1000000,0x1000000,0xfb000020,0x0,0x10000,0x8000,0x1e0000,0x2000,0x1800,0x600,0x1000020,0x1e0000,0x1800,0x600,0x0,0x1000020,0x200000,0x1c00020,0x0,0x0,0x200000,0xc00000,0xc00000,0xc00000,0x1000020,0x0,0x200,0x0,0x200000,0x400,0x8,0x1000,0x8,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x630f,0x630e,0x1,0x1,0x0,0x48,0x8,0x800,0x800,0x0,0x8,0x8,0x630f,0x6000,0x0,0x0,0x18000,0x0,0x20000,0x0,0x8,0x18000,0x20000,0x0,0x6,0x600e,0x0,0x600e,0x8,0x48,0x0,0x0,0x0,0x0,0x600e,0x8,0x4000a,0x4000a,0x0,0x0,0x1e,0x0,0x1e,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[11];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SyntaxChecker(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SyntaxChecker(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SyntaxCheckerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SyntaxChecker(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SyntaxCheckerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SyntaxChecker(SyntaxCheckerTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SyntaxCheckerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[53];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 43; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 53; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 11; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
