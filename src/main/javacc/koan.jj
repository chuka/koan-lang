/*
 *  koan.jj
 *
 *  JavaCC specification for Koan.
 */


options {
  UNICODE_INPUT = true;
  STATIC = false;
}

PARSER_BEGIN(Parser)

package edu.lmu.cs.xlg.koan.syntax;

import java.util.List;
import java.util.ArrayList;
import java.io.Reader;
import edu.lmu.cs.xlg.util.Log;
import edu.lmu.cs.xlg.koan.entities.*;

public class Parser {
    public Script parse(Reader reader, Log log) {
        try {
            return parseScript();
        } catch (TokenMgrError e) {
            log.exception(e);
            return null;
        } catch (ParseException e) {
            log.exception(e);
            return null;
        }
    }
}

PARSER_END(Parser)

// ---------------------------------------------------------------------------
// LEXICAL ANALYZER
// ---------------------------------------------------------------------------

// Whitespace and comments

SKIP: {
    < (" " | "\t" | "\n")+ >
| <"c:" (~["\n","\r"])* ("\n"|"\r")>
| <"c::" (~["\u0000"-"\u001f", "\u007f"-"\u009f"]|"\n"|"\r")* "::c">
}

// Literals and reserved words and symbols

TOKEN: {
    "(" | ")" | "[" | "]" | "{" | "}" | "-" | "+" | "/" | "*" | "%" | "**" | "!" | ":=" | ":=:"
| "&&" | "||" | "<" | ">" | "==" | "<=" | ">=" | "!=" | "," | ".." | "..." | "f:" | "??:"
| "8:" | "p:" | "??" |  "->"  | "T" | "F"

| <NUMTYPE: "#">
| <STRTYPE: "$">
| <BOOLTYPE: "^">
| <FUNTYPE: "f">
| <REGEXTYPE: "@">
| <NULLTYPE: "~">

|
    < STRINGLIT:
        "\""
        (
            ~["\"", "\\" ,"\u0000"-"\u001f", "\u007f"-"\u009f"]
        )*
        "\""
    >
|
    <NUMLIT: (["0"-"9"])+ ("." (["0"-"9"])+)? >
|
    <BR: ";">
|
    <ID: ["A"-"Z" , "a"-"z" , "0"-"9"] (["-" , "_" , "A"-"Z" , "a"-"z" , "0"-"9"])* >
}


// ---------------------------------------------------------------------------
// SYNTAX ANALYZER
// ---------------------------------------------------------------------------


Script parseScript(): {
    List<Statement> statements = new ArrayList<Statement>();
    Statement s;
} {
    (s = parseStmt() {statements.add(s);} (<BR>)+)*
    <EOF>
    {return new Script(statements);}
}

Statement parseStmt(): {
    Statement s;
} {
    (
        s = parseVarDec()
    |
        LOOKAHEAD(<ID> ":=") s = parseAssignment()
    |
        LOOKAHEAD(<ID> ":=:") s = parseSwap()
    |
        s = parsePrintStmt()
    |
        s = parseBreakStmt()
    |
        s = parseIfStmt()
    |
        s = parseLoopStmt()
    |
        LOOKAHEAD(<ID> "(") s = parseFunCallStmt()
    |
        s = parseBlock()
    )
    {return s;}
}

Variable parseVarDec(): {
    String t = null;
    Token v = null;
    Expression e = null;
    boolean constant = false;
} {
    t = parseType()
    v = <ID>
    ("!" {constant = true;})?
    ":=" e = parseExp()
    {return new Variable(v.image, t, e, constant);}
}


VariableReference parseVarRef(): {
    VariableReference v;
    Expression e =  null;
    Token i;
}{
    (
        LOOKAHEAD(2) 
        v = parseFunCallExp()
    |
        i = <ID>
        {v = new SimpleVariableReference(i.image);}
    )
    (
        "[" e = parseExp() "]"
        {v = new SubscriptedVariable(v, e);}
    )*
    {return v;}
}

String parseType(): {
    Token i;
    StringBuilder builder = new StringBuilder();
} {
    (
        (   
            i = <NUMTYPE>
        | 
            i = <STRTYPE>
        |
            i = <BOOLTYPE>
        |
            i = <FUNTYPE>
        )
        {builder.append(i.image);}
        (
            LOOKAHEAD(2) "[" "]" {builder.append("[]");}
        )*
    |   
        i = <NULLTYPE>
        {builder.append(i.image);}
    )
  {return builder.toString();}
}


Statement parseAssignment(): {
    Statement s = null;
    VariableReference v = null;
    Expression e = null;
} {
      (    v = parseVarRef()
          ":="
          e = parseExp()
          { s = new AssignmentStatement(v, e); }
      )
    {return s;}
}


Statement parseSwap(): {
    VariableReference v1 = null;
    VariableReference v2 = null;
} {
    (
        v1 = parseVarRef()
        ":=:"
        v2 = parseVarRef()
    )
    {return new SwapStatement(v1, v2);}
}


Statement parsePrintStmt(): {
    Expression e = null;
} {
    ("p:" e = parseExp())
    {return new PrintStatement(e);}
}

Statement parseBreakStmt(): {
} {
    "!!"
    {return new BreakStatement();}
}

Statement parseIfStmt(): {
    IfStatement.Arm arm;
    List<IfStatement.Arm> arms = new ArrayList<IfStatement.Arm>();
    Expression e;
    Statement s;
    Statement elsePart = null;
} {
    (
        "??:" e = parseExp() "?" s = parseStmt()
        { arms.add(new IfStatement.Arm(e,s)); }
        (
            LOOKAHEAD (":" parseExp())
            ":" e = parseExp() "?" s = parseStmt()
            { arms.add(new IfStatement.Arm(e, s)); }
        )*
        (
            LOOKAHEAD (":" parseStmt())
            ":" elsePart = parseStmt()
        )?
        "??"
    )
    {return new IfStatement(arms, elsePart);}
}

Statement parseLoopStmt(): {
    Statement s;
} {
    (
      LOOKAHEAD(2)
        s = parseForLoop()
      | s = parseInfiniteLoop()
    )
    { return s; }
}

Statement parseForLoop(): {
    Expression iterationExpression = null;
    Function executeFunction = null;
    Statement executeStatement = null;
    Token iteratorVariable = null;
} {
    "8:"
    iterationExpression = parseExp()
    (
        executeFunction = parseAnonFun()
        | (
            ( "|" iteratorVariable = <ID> "|")?
            executeStatement = parseStmt()
        )
    )
    
    { return (iteratorVariable == null) ? 
         new ForLoop(iterationExpression, executeFunction, executeStatement, null) 
         : new ForLoop(iterationExpression, executeFunction, executeStatement, iteratorVariable.image); }
}

Statement parseInfiniteLoop(): {
    Statement s;
} {
    ("8:" s = parseStmt())
    { return new InfiniteLoop(s); }
}


Block parseBlock(): {
    List<Statement> statements = new ArrayList<Statement>();
    Statement s;
} {
    "{" (<BR>)* ( s = parseStmt() {statements.add(s);} (<BR>)+)* "}"
    { return new Block(statements); }
}

Statement parseFunCallStmt(): {
   FunctionCallExpression f;
} {
    f = parseFunCallExp()
    { return new FunctionCallStatement(f); }
}

FunctionCallExpression parseFunCallExp(): {
   Token t;
   List<Expression> args = new ArrayList<Expression>();
} {
    t = <ID>
    "(" args = parseArgs() ")"
    { return new FunctionCallExpression(t.image, args); }
}


Expression parseExp(): {
    Expression e1;
    Expression e2;
} {
    e1 = parseExp1()
    ("||" e2 = parseExp2() {e1 = new BinaryExpression(e1, "||", e2);})*
    { return e1; }
}

Expression parseExp1(): {
    Expression e1;
    Expression e2;
} {
    e1 = parseExp2()
    ( "&&" e2 = parseExp2() {e1 = new BinaryExpression(e1, "&&", e2);} )*
    { return e1; }
}

Expression parseExp2(): {
    String op;
    Expression e1;
    Expression e2;
} {
    e1 = parseExp3()
    (
        op = parseRelOp()
        e2 = parseExp3()
        { e1 = new BinaryExpression(e1, op, e2); }
    )?
    { return e1; }
}

Expression parseExp3(): {
    String op;
    Expression e1;
    Expression e2;
} {
    e1 = parseExp4()
    (
        op = parseExpnOp()
        e2 = parseExp4()
        { e1 = new BinaryExpression(e1, op, e2); }
    )?
    { return e1; }
}

Expression parseExp4(): {
    String op;
    Expression e1;
    Expression e2;
} {
    e1 = parseExp5()
    (
        op = parseMulOp()
        e2 = parseExp5()
        { e1 = new BinaryExpression(e1, op, e2); }
    )*
    { return e1; }
}

Expression parseExp5(): {
    String op;
    Expression e1;
    Expression e2;
} {
    e1 = parseExp6()
    (
        op = parseAddOp()
        e2 = parseExp6()
        { e1 = new BinaryExpression(e1, op, e2); }
    )*
    { return e1; }
}

Expression parseExp6(): {
    String op;
    Expression e1;
    Expression e2;
} {
    e1 = parseExp7()
    (
        op = parseRangeOp()
        e2 = parseExp7()
        { e1 = new BinaryExpression(e1, op, e2); }
    )*
    { return e1; }
}

Expression parseExp7(): {
    Expression e;
    Token t;
} {
    (
        e = parseLiteral()
    |
        e = parseArrayExp()
    |
        e = parseVarRef()
    |
        e = parseAnonFun()
    |
        "(" e = parseExp() ")"
    )
    { return e; }
}

String parseRelOp():  {
    Token s;
} {
    (s = "<" | s = "<=" | s = "==" | s = "!=" | s = ">=" | s = ">")
    { return s.image; }
}

String parseExpnOp(): {
    Token s;
} {
    s = "**"
    { return s.image; }
}

String parseMulOp():  {
    Token s;
} {
    (s = "*" | s = "/" | s = "%")
    { return s.image; }
}

String parseAddOp():  {
    Token s;
} {
    (s = "+" | s = "-")
    { return s.image; }
}

String parseRangeOp():  {
    Token s;
} {
    (s = ".." | s = "...")
    { return s.image; }
}

Literal parseLiteral(): {} {
   (LOOKAHEAD(3) parseBool()
   | <NUMLIT>
   | <STRINGLIT>
   )
   {return new Literal("Not done yet");}
}

BooleanLiteral parseBool(): {
    BooleanLiteral b;
    }{
     "T" {return BooleanLiteral.T;}
|
     "F" {return BooleanLiteral.F; }
}

ArrayExpression parseArrayExp(): {
    Expression e = null;
    List<Expression> list = new ArrayList<Expression>();
} {
    "[" 
    (
      e = parseExp() {list.add(e);}
      ("," e = parseExp() {list.add(e);} )*
    )?
    "]"
    {return new ArrayExpression(list);}
}

Function parseAnonFun(): {
    Token p;
    String t;
    List<Variable> params = new ArrayList<Variable>();
    Block body = null;
    
} {
    "f:"
    (
        "(" 
        (
//            // TODO: enforce type checking in function parameters//           "(" (t = parseType() p =<ID> {params.add(new Variable(p.image, t, null, false)); } )* ")" 
			p = <ID> {params.add(new Variable(p.image, "INFERENCED", null, false));}			("," p = <ID> {params.add(new Variable(p.image, "INFERENCED", null, false));})*		)? 
		")" "->"
    )?
    body = parseBlock()
    {return new Function(params, body);}
}


List parseArgs(): {
    List<Expression> expressions = new ArrayList<Expression>();
    Expression e = null;
} {
    (
        e = parseExp() { expressions.add(e); }
        ( "," parseExp() { expressions.add(e); })*
    )?
    { return expressions; }
}

/*
Range parseRange(): {
    Expression lowerBound = null;
    Expression upperBound = null;
} {
      ( "..." | ".." ) upperBound = parseExp()
    | lowerBound = parseExp() ( "..." | ".." )
      (LOOKAHEAD({getToken(3).kind == Expression}) upperBound = parseExp())?
    { return new Range(lowerBound, upperBound); }
}
*/

