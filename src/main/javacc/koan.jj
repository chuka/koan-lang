PARSER_BEGIN(SyntaxChecker)

public class SyntaxChecker {
    public static void main(String[] args) {
        try {
            new SyntaxChecker(new java.io.StringReader(args[0])).S();
            System.out.println("Syntax is okay");
        } catch (Throwable e) {
            // Catching Throwable is ugly but JavaCC throws Error objects!
            System.out.println("Syntax check failed: " + e.getMessage());
        }
    }
}

PARSER_END(SyntaxChecker)

SKIP: { 
    < (" " | "\t" | "\r" | "\n")+ > 
    | <"c:" (~["\n","\r"])*>
}

TOKEN: {
    "(" | ")" | "[" | "]" | "{" | "}" | "-" | "+" | "/" | "*" | "**" | ":="
    | "&&" | "||" | "==" | "<=" | ">=" | "!=" | "," | ".." | "..." | "f:"
    | "8:" | "->"    
    
    | <NUMTYPE: "#">
    | <STRTYPE: "$">
    | <BOOLTYPE: "^">
    | <FUNTYPE: "f">
    | <REGEXTYPE: "@">
    | <NULLTYPE: "~">
    
    | <INTLIT: (["0"-"9"])+> 
    | <STRING: (["A"-"Z", "a"-"z", "0"-"9"])+ >
    | <CHARLIT: (["A"-"Z", "a"-"z"])>
    | <BR: ";">
}

void SCRIPT(): {} { ( STMT() <BR> )+ }
void STMT(): {} {
    LOOKAHEAD(6)
      DEC()
    | ASSIGNMENT()
    | PRINTSTMT()
    | IFSTMT()
    | LOOP()
    | EXP()
}

void DEC(): {} { 
    LOOKAHEAD(2)
      VARDEC() 
    | CONSTDEC() 
    }
void VARDEC(): {} { TYPE() ID() ":=" EXP() }
void CONSTDEC(): {} { TYPE() ID() "!" ":=" EXP() }
void TYPE(): {} { 
    <NUMTYPE> 
    | <STRTYPE> 
    | <BOOLTYPE> 
    | <FUNTYPE> 
    | <REGEXTYPE>
    | <NULLTYPE> 
}
void RETURNTYPE(): {} { TYPE() }
void PARAMS(): {} { ( "" |  ID() ( "," ID() )* ) }

void ASSIGNMENT(): {} {
     LOOKAHEAD(2) 
       ( ID() ":=" EXP() ) 
     | SWAP() }
void SWAP(): {} {  ID() ":=:" ID()  }
void PRINTSTMT(): {} { "p:" EXP() }
void IFSTMT(): {} {
    "??:" EXP() "?" STMT() 
    LOOKAHEAD(2)
    ( ":" EXP() "?" STMT() )*
    ( ":" STMT() )? "??"
}

void LOOP(): {} { 
    LOOKAHEAD(2)
      FORLOOP() 
    | INFINITELOOP() 
    }
void FORLOOP(): {} { "8:" RANGE() ( ANONFUN() | ( ID() BLOCK() ) ) }
void INFINITELOOP(): {} { "8:" BLOCK() }
void PROCCALL(): {} { ( ( ID() "(" ARGS() ")" ) | ANONFUN() ) }
void BLOCK(): {} { "{" (STMT() <BR>)* "}" }

void BOOL(): {} { "T" | "F" }
void EXP():  {} { EXP1() ( "||" EXP1() )* }
void EXP1(): {} { EXP2() ( "&&" EXP2() )* }
void EXP2(): {} { EXP3() ( RELOP() EXP3() )? }
void EXP3(): {} { EXP4() ( EXPNOP() EXP4() )? }
void EXP4(): {} { EXP5() ( MULOP() EXP4() )* }
void EXP5(): {} { EXP6() ( ADDOP() EXP5() )* }
void EXP6(): {} { 
    LOOKAHEAD(5)
      LIT() 
    | ID() 
    | ARRAY() 
    | OBJECT() 
    | PROCCALL() 
    | ARRAYREF() 
    }

void RELOP():  {} { "<" | "<=" | "==" | "!=" | ">=" | ">" }
void EXPNOP(): {} { "**" }
void MULOP():  {} { "*" | "/" | "%"}
void ADDOP():  {} { "+" | "-" }

void LIT(): {} { 
   LOOKAHEAD(3)
   BOOL() 
   | <INTLIT> 
   | <STRING> 
   }
void ARRAY(): {} { "[" ( EXP() )* ( "," EXP() )* "]" }
void ARRAYREF(): {} { ID() "[" ( LOOKAHEAD(3) EXP() | RANGE() ) "]" }
void OBJECT(): {} { ID() "{" ( ID() ":" EXP() "," )+ "}" }
void ANONFUN(): {} { "f:" ( PARAMS() "->" )? BLOCK() }

void REGEX(): {} { ID() ":=" "/" <STRING> "/" }

void ARGS(): {} { EXP5() ( "," EXP5() )* }
void RANGE(): {} {
    LOOKAHEAD(4)
      ( "..." | ".." ) EXP()
    | EXP() ( "..." | ".." )
    | EXP() ( "..." | ".." ) EXP()
}

void ID(): {} { (<CHARLIT>)+ (
    LOOKAHEAD(3)
      "-" 
    | "_" 
    | <CHARLIT> 
    | <INTLIT> )* }

void HASH(): {} { "#:{" ( ID() "=>" EXP() ) ( "," ID() "=>" EXP() )* "}" }




void S(): {} { E() <EOF>                                   }
void E(): {} { LOOKAHEAD(2) ID() ":=" E() | T() ( "+" T() )* }
void T(): {} { F() ( "*" F() )*                              }
void F(): {} { <INTLIT> | <STRING> | <CHARLIT> | <BR> | "(" E() ")"                  }
