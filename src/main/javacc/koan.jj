PARSER_BEGIN(SyntaxChecker)

public class SyntaxChecker {
    public static void main(String[] args) {
        try {
            new SyntaxChecker(new java.io.StringReader(args[0])).S();
            System.out.println("Syntax is okay");
        } catch (Throwable e) {
            // Catching Throwable is ugly but JavaCC throws Error objects!
            System.out.println("Syntax check failed: " + e.getMessage());
        }
    }
}

PARSER_END(SyntaxChecker)

SKIP: { " " | "\t" | "\r" }
TOKEN: {
    "(" | ")" | "+" | "*" | ":="
    | <INTLIT: (["0"-"9"])+> 
    | <STRING: (["A"-"Z", "a"-"z", "0"-"9"])+ >
    | <CHARLIT: (["A"-"Z", "a"-"z"])>
    | <BR: ("\n" | ";")>
}

void SCRIPT(): {} { (STMT() <BR>)+ }
void STMT(): {} { DEC() | ASSIGNMENT() | PRINTSTMT() | CONDITIONAL()
                   | LOOP() | PROCCALL() | EXP() }

void DEC(): {} { VARDEC() | CONSTDEC() | PROCDEC() | FUNDEC() }

void VARDEC(): {} { ID() ("," ID())* ":=" EXP() ("," EXP())*
              |  OBJECT()}
void CONSTDEC(): {} { ID() "!" ("," ID()"!")* ":=" EXP() ("," EXP())* }
void PROCDEC(): {} { ID() ":= f: (" PARAMS() ") ->" BLOCK() }
void FUNDEC(): {} { ID() ":= f: (" PARAMS() ") ->" BLOCK() }
void PARAMS(): {} { "" | (" ")* |  ID() ("," ID())* }
void ASSIGNMENT(): {} { DEC() | (ID() ":=" EXP()) | (ID() ":=:" ID()) }
void PRINTSTMT(): {} { "p:" EXP() }
void CONDITIONAL(): {} { "??:" EXP() "?" STMT() <BR> (CONDITIONAL())* (":" EXP() "?" STMT() <BR> (CONDITIONAL()))*  <BR> (":" STMT() )? "??" }
void LOOP(): {} { "8:" (RANGE())? STMT() }
void PROCCALL(): {} { ( ID() "(" ARGS() ")" ) | ANONFUN() }
void BOOL(): {} { "T" | "F" }
void BLOCK(): {} { "{" STMT() ("!!")? "}" | "{" (STMT() BR)+ ("!!")? "}" }

void EXP(): {} { EXP1() ("||" EXP1())* }
void EXP1(): {} { EXP2() ("&&" EXP2())* }
void EXP2(): {} { EXP3() (RELOP() EXP3())? }
void EXP3(): {} { EXP4() (EXPNOP() EXP4())?}
void EXP3(): {} { EXP4() (MULOP() EXP4())* }
void EXP4(): {} { EXP5() (ADDOP() EXP5())* }
void EXP5(): {} { LIT() | ID() | ARRAY() | OBJECT() | ANONFUN() | PROCCALL() | HASH() | ARRAYREF() | "p:" }

void RELOP(): {} { "<" | "<=" | "==" | "!=" | ">=" | ">" }
void EXPNOP(): {} {"**"}
void MULOP(): {} { "*" | "/" | "%" | "**" }
void ADDOP(): {} { "+" | "-" }

void LIT(): {} { BOOL() | INTLIT | STRING }
void ARRAY(): {} { "[" (EXP())* ("," EXP())* "]" }
void ARRAYREF(): {} { ID() "[" "." | INTLIT+ ((".." | "...") INTLIT+)? "]" }
void OBJECT(): {} { ID() ":=" "{" ( ID() ":" EXP "," )+ "}" }
void ANONFUN(): {} { 'f:{" (EXP() ("_"("_" | INTLIT+ ) EXP() )* )* "}" }

void REGEX(): {} { ID() ":=" "/" .* "/" }

void ARGS(): {} { EXP5() ("," EXP5())* }
void RANGE(): {} { INTLIT+ ( "..." | ".." ) INTLIT+ }

void ID(): {} { CHARLIT+ (["-", "_", CHARLIT, INTLIT])* }


void COMMENT(): {} { "c:"  (.)*   "\n" }
void HASH(): {} { "#:{" (ID() "=>" EXP()) ("," ID() "=>" EXP())* "}" }




void S(): {} { E() <EOF>                                   }
void E(): {} { LOOKAHEAD(2) <ID> ":=" E() | T() ("+" T())* }
void T(): {} { F() ("*" F())*                              }
void F(): {} { <INTLIT> | <STRING> | <CHARLIT> | <BR> | "(" E() ")"                  }
