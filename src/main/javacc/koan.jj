/*
 *  koan.jj
 *
 *  JavaCC specification for Koan.
 */

options {
  UNICODE_INPUT = true;
  STATIC = false;
}

PARSER_BEGIN(Parser)

package edu.lmu.cs.xlg.koan.syntax;

import java.util.List;
import java.util.ArrayList;
import java.io.Reader;
import edu.lmu.cs.xlg.util.Log;
import edu.lmu.cs.xlg.koan.entities.*;


public class Parser {
    /**
     * Returns the result of parsing the Koan program on the given Reader.
     */
    public Script parse(Reader reader, Log log) {
        try {
            return parseScript();
        } catch (TokenMgrError e) {
            log.exception(e);
            return null;
        } catch (ParseException e) {
            log.exception(e);
            return null;
        }
    }
}

PARSER_END(Parser)

SKIP: { 
    < (" " | "\t" | "\r" | "\n")+ > 
    | <"c:" (~["\n","\r"])*>
}

TOKEN: {
    "(" | ")" | "[" | "]" | "{" | "}" | "-" | "+" | "/" | "*" | "**" | ":="
    | "&&" | "||" | "==" | "<=" | ">=" | "!=" | "," | ".." | "..." | "f:"
    | "8:" | "->"  | "T" | "F"   
    
    | <NUMTYPE: "#">
    | <STRTYPE: "$">
    | <BOOLTYPE: "^">
    | <FUNTYPE: "f">
    | <REGEXTYPE: "@">
    | <NULLTYPE: "~">
    
    | <INTLIT: (["0"-"9"])+> 
    | <STRING: (["A"-"Z", "a"-"z", "0"-"9"])+ >
    | <CHARLIT: (["A"-"Z", "a"-"z"])>
    | <BR: ";">
    | <EMPTYLINE: "\n">
    | <ID: ["A"-"Z" , "a"-"z" , "0"-"9"] (["-" , "_" , "A"-"Z" , "a"-"z" , "0"-"9"])+ >
}

Script parseScript(): {
    List<Statement> statements = new ArrayList<Statement>();
    Statement s;
} { 
    (<EMPTYLINE>)* 
    (s = parseStmt() {statements.add(s);})+
    (<EMPTYLINE>)*
    <EOF>
    {return new Script(statements);}
}

Statement parseStmt(): {
    Statement s;
} {
    (
        LOOKAHEAD(6)
        s = parseDec()
        | s = parseAssignment()
        | s = parsePrintStmt()
        | s = parseIfStmt()
        | s = parseLoopStmt()
        | s = parseExp()
    )
    (<BR>)
    (<EMPTYLINE>)*
    {return s;}
}

Statement parseDec(): {
    Statement s;
} { 
    (
        LOOKAHEAD(2)
          s = parseVarDec() 
        | s = parseConstDec()
    ) 
    {return s;}
}

Variable parseVarDec(): {
    String t = null;
    Token v = null;
    Expression e = null;
    boolean constant = false;
} { 
    (LOOKAHEAD (parseType() <ID>) t = parseType())? 
    v = <ID>
    (":=" e = parseExp())?
    {return new Variable(v.image, t, e, constant);}
}

Variable parseConstDec(): {
    String t = null;
    Token v = null;
    Expression e = null;
    boolean constant = true;
} { 
    (LOOKAHEAD (parseType() <ID> "!") t = parseType())? 
    v = <ID>
    (":=" e = parseExp())?
    {return new Variable(v.image, t, e, constant);}
}


Type parseType(): {
    Token i;
    StringBuilder builder = new StringBuilder();
} { 
    (   i = <NUMTYPE> 
        | i = <STRTYPE> 
        | i = <BOOLTYPE> 
        | i = <FUNTYPE> 
        | i = <REGEXTYPE>
        | i = <NULLTYPE>
    )
    {builder.append(i.image);}
    (
        LOOKAHEAD(2) parseArray() {builder.append(" Array");}
    )*
    {return builder.toString();}
}


Statement parseAssignment(): {
    Statement s = null;
    VariableReference v = null;
    Expression e = null;
} {
    (
        LOOKAHEAD(2) 
          ( <ID> ":=" parseExp() )
          v = <ID>
          ":="
          e = parseExp()
          s = new AssignmentStatement(v, e);
        | s = parseSwap()
    )
    {return s;}
}


Statement parseSwap(): {
    VariableReference v1 = null;
    VariableReference v2 = null;
} {
    (
        v1 = <ID> 
        ":=:" 
        v2 = <ID>
    )  
    {return new SwapStatement(v1, v2);}
}


Statement parsePrintStmt(): {
    Expression e = null;
} { 
    ("p:" e = parseExpression())
    {return new PrintStatement(e);}
}


Statement parseIfStmt(): {
    IfStatement.Arm arm;
    List<IfStatement.Arm> arms = new ArrayList<IfStatement.Arm>();
    Expression e;
    Statement s;
    Statement elseStatement = null;
} {
    (
        "??:" e = parseExp() "?" s = parseStmt() 
        { arms.add(new IfStatement.Arm(e,s); }
        (
            LOOKAHEAD({ getToken(3).image == "?" }) 
            ":" e = parseExp() "?" elseStatement = parseStmt() 
            { arms.add(new IfStatement.Arm(e, elseStatement); }
        )*
        (
            LOOKAHEAD({ getToken(2).kind == ":" Statement })
            ":" elseStatement = parseStmt() 
            { arms.add(new IfStatement.Arm(null, elseStatement); }
        )?
    )
}

Statement LOOP(): {} { 
    LOOKAHEAD(2)
      FORLOOP() 
    | INFINITELOOP() 
    }
Statement FORLOOP(): {} { "8:" RANGE() ( ANONFUN() | ( <ID> BLOCK() ) ) }
Statement INFINITELOOP(): {} { "8:" BLOCK() }
Statement PROCCALL(): {} { ( ( <ID> "(" ARGS() ")" ) | ANONFUN() ) }
Block BLOCK(): {} { "{" (STMT() <BR>)* "}" }

Boolean BOOL(): {} { "T" | "F" }
Expression EXP():  {} { EXP1() ( "||" EXP1() )* }
Expression EXP1(): {} { EXP2() ( "&&" EXP2() )* }
Expression EXP2(): {} { EXP3() ( RELOP() EXP3() )? }
Expression EXP3(): {} { EXP4() ( EXPNOP() EXP4() )? }
Expression EXP4(): {} { EXP5() ( LOOKAHEAD({getToken(2).image == ("*" | "/" | "%")})MULOP() EXP4() )* }
Expression EXP5(): {} { EXP6() ( LOOKAHEAD({getToken(2).image == ("+" | "-" )}) ADDOP() EXP5() )* }
Expression EXP6(): {} {
      LIT() 
    | ARRAY() 
    | LOOKAHEAD({getToken(2).image == "{"}) OBJECT()
    | LOOKAHEAD({getToken(2).image == "("}) PROCCALL() 
    | LOOKAHEAD({getToken(2).image == "["}) ARRAYREF() 
    | <ID>
}

String RELOP():  {} { "<" | "<=" | "==" | "!=" | ">=" | ">" }
String EXPNOP(): {} { "**" }
String MULOP():  {} { "*" | "/" | "%"}
String ADDOP():  {} { "+" | "-" }

Literal LIT(): {} { 
   LOOKAHEAD(3)
   BOOL() 
   | <INTLIT> 
   | <STRING> 
   | <CHARLIT>
}
Array ARRAY(): {} { "[" ( EXP() )* ( "," EXP() )* "]" }
void ARRAYREF(): {} { <ID> "[" ( LOOKAHEAD(2) EXP() | RANGE() ) "]" }
Object OBJECT(): {} { <ID> "{" ( <ID> ":" EXP() "," )+ "}" }

Function parseAnonFun(): {
    List<Variable> params = new ArrayList<Variable>();
    Block body = null;
} { 
    (
        "f:" 
        ("(" parseParams(params) ")" "->")? 
        body = parseBlock()
    )
    {return new Function(params, body);}
}

void parseParams(List<Variable> params): {
    String t;
    Token p;
} { 
    ( 
        t = "INFERENCED" p = <ID> 
        {params.add(new Variable(p.image, t, null, false));}
        (
            "," t = "INFERENCED" p = <ID>
            {params.add(new Variable(p.image, t, null, false));}
        )*
    )
}

RegularExpression REGEX(): {} { <ID> ":=" "/" <STRING> "/" }

void ARGS(): {} { EXP5() ( "," EXP5() )* }
Range RANGE(): {} {
      ( "..." | ".." ) EXP()
    | EXP() ( "..." | ".." ) (LOOKAHEAD({getToken(3).kind == Expression}) EXP())?
}

void S(): {} { E() <EOF>                                   }
void E(): {} { LOOKAHEAD(2) <ID> ":=" E() | T() ( "+" T() )* }
void T(): {} { F() ( "*" F() )*                              }
void F(): {} { <INTLIT> | <STRING> | <CHARLIT> | <BR> | "(" E() ")"                  }
