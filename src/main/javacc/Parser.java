/* Generated By:JavaCC: Do not edit this line. Parser.java */
package edu.lmu.cs.xlg.iki.syntax;

import java.util.List;
import java.util.ArrayList;
import java.io.Reader;
import edu.lmu.cs.xlg.util.Log;
import edu.lmu.cs.xlg.iki.entities.Number;
import edu.lmu.cs.xlg.iki.entities.*;

public class Parser implements ParserConstants {

    /**
     * Returns the result of parsing the Iki program on the given Reader.
     */
    public Program parse(Log log) {
        try {
            return PROGRAM();
        } catch (TokenMgrError e) {
            log.exception(e);
            return null;
        } catch (ParseException e) {
            log.exception(e);
            return null;
        }
    }

// Iki Grammar (from http://www.cs.lmu.edu/~ray/notes/iki/)
//
//  PROGRAM   ->  'begin' BLOCK 'end'
//  BLOCK     ->  (DEC ';')* (STMT ';')+
//  DEC       ->  'var' ID
//  STMT      ->  ID '=' EXP
//            |   'read' ID (',' ID)*
//            |   'write' EXP (',' EXP)*
//            |   'while' EXP 'loop' BLOCK 'end'
//  EXP       ->  TERM (ADDOP TERM)*
//  TERM      ->  FACTOR (MULOP FACTOR)*
//  FACTOR    ->  INTLIT | ID | '(' EXP ')'
//  ADDOP     ->  '+' | '-'
//  MULOP     ->  '*' | '/'
  final public Program PROGRAM() throws ParseException {
    Block b;
    jj_consume_token(6);
    b = BLOCK();
    jj_consume_token(11);
    jj_consume_token(0);
     {if (true) return new Program(b);}
    throw new Error("Missing return statement in function");
  }

  final public Block BLOCK() throws ParseException {
    List<Declaration> declarations = new ArrayList<Declaration>();
    List<Statement> statements = new ArrayList<Statement>();
    Declaration d;
    Statement s;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 7:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      d = DEC();
      jj_consume_token(15);
                    declarations.add(d);
    }
    label_2:
    while (true) {
      s = STMT();
      jj_consume_token(15);
                     statements.add(s);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 8:
      case 9:
      case 10:
      case ID:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
    }
     {if (true) return new Block(declarations, statements);}
    throw new Error("Missing return statement in function");
  }

  final public Declaration DEC() throws ParseException {
    Token i;
    jj_consume_token(7);
    i = jj_consume_token(ID);
                    {if (true) return new Variable(i.image);}
    throw new Error("Missing return statement in function");
  }

  final public Statement STMT() throws ParseException {
    Block body;
    Token v;
    Expression e;
    List<VariableReference> references = new ArrayList<VariableReference>();
    List<Expression> expressions = new ArrayList<Expression>();
    Expression condition;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      v = jj_consume_token(ID);
      jj_consume_token(26);
      e = EXPR();
     {if (true) return new AssignmentStatement(new VariableReference(v.image), e);}
      break;
    case 8:
      jj_consume_token(8);
      v = jj_consume_token(ID);
                     references.add(new VariableReference(v.image));
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 16:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_3;
        }
        jj_consume_token(16);
        v = jj_consume_token(ID);
                   references.add(new VariableReference(v.image));
      }
     {if (true) return new ReadStatement(references);}
      break;
    case 9:
      jj_consume_token(9);
      e = EXPR();
                        expressions.add(e);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 16:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_4;
        }
        jj_consume_token(16);
        e = EXPR();
                     expressions.add(e);
      }
     {if (true) return new WriteStatement(expressions);}
      break;
    case 10:
      jj_consume_token(10);
      condition = EXPR();
      jj_consume_token(12);
      body = BLOCK();
      jj_consume_token(11);
     {if (true) return new WhileStatement(condition, body);}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression EXPR() throws ParseException {
    Expression e1, e2;
    BinaryExpression.Operator op;
    e1 = TERM();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 18:
      case 19:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_5;
      }
      op = ADDOP();
      e2 = TERM();
         e1 = new BinaryExpression(op, e1, e2);
    }
     {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression TERM() throws ParseException {
    Expression e1, e2;
    BinaryExpression.Operator op;
    e1 = FACTOR();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 20:
      case 21:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_6;
      }
      op = MULOP();
      e2 = FACTOR();
         e1 = new BinaryExpression(op, e1, e2);
    }
     {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression FACTOR() throws ParseException {
    Token v;
    Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTLIT:
      v = jj_consume_token(INTLIT);
                  {if (true) return new Number(Integer.parseInt(v.image));}
      break;
    case ID:
      v = jj_consume_token(ID);
              {if (true) return new VariableReference(v.image);}
      break;
    case 13:
      jj_consume_token(13);
      e = EXPR();
      jj_consume_token(14);
                        {if (true) return e;}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public BinaryExpression.Operator ADDOP() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 18:
      jj_consume_token(18);
         {if (true) return BinaryExpression.Operator.PLUS;}
      break;
    case 19:
      jj_consume_token(19);
         {if (true) return BinaryExpression.Operator.MINUS;}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public BinaryExpression.Operator MULOP() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 20:
      jj_consume_token(20);
         {if (true) return BinaryExpression.Operator.TIMES;}
      break;
    case 21:
      jj_consume_token(21);
         {if (true) return BinaryExpression.Operator.DIVIDE;}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[10];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80,0x800700,0x10000,0x10000,0x800700,0xc0000,0x300000,0xc02000,0xc0000,0x300000,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[27];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 10; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 27; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
