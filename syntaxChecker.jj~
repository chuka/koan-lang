PARSER_BEGIN(SyntaxChecker)

public class SyntaxChecker {
    public static void main(String[] args) {
        try {
            new SyntaxChecker(new java.io.StringReader(args[0])).S();
            System.out.println("Syntax is okay");
        } catch (Throwable e) {
            // Catching Throwable is ugly but JavaCC throws Error objects!
            System.out.println("Syntax check failed: " + e.getMessage());
        }
    }
}

PARSER_END(SyntaxChecker)

SKIP: { " " | "\t" | "\r" }
BR: { "\n" }
TOKEN: {
    "(" | ")" | "+" | "*" | ":="
    | <NUM: (["0"-"9"])+> | <ID: (["a"-"z"])+>
}

void SCRIPT(): {} { (STMT() BR())+ }
void STMT(): {} { DEC() | ASSIGNMENT() | PRINTSTMT() | CONDITIONAL()
                   | FORLOOP() | WHILELOOP() | PROCCALL() | EXP() }

void DEC(): {} { VARDEC() | CONSTDEC() | PROCDEC() | FUNDEC() }

void VARDEC(): {} { ID() (',' ID())* ':=' EXP() (',' EXP())*
              |  OBJECT()}
void CONSTDEC(): {} { ID() '!' (',' ID()'!')* ':=' EXP() (',' EXP())* }
void PROCDEC(): {} { ID() ':= f: (' PARAMS() ') ->' BLOCK() }
void FUNDEC(): {} { ID() ':= f: (' PARAMS() ') ->' BLOCK() }
void PARAMS(): {} { () | ( )* |  ID() (',' ID())* }
void ASSIGNMENT(): {} { DEC() | (ID() ':=:' ID()) }
void PRINTSTMT(): {} { 'p:' EXP() }
void CONDITIONAL(): {} { '??:' EXP() '?' STMT() BR() (CONDITIONAL())* (':' EXP() '?' STMT() BR() (CONDITIONAL())*)*  BR() (':' STMT() )? '??' }
void FORLOOP(): {} { '8:' RANGE() BLOCK() }
void WHILELOOP(): {} { '8:' BLOCK() }
void PROCCALL(): {} { (ID() '('ARGS()')') | ANONFUN() }
void BLOCK(): {} { '{' STMT() ('!!')? '}' | '{' (STMT() BR())+ ('!!')? '}' }
void EXP(): {} { EXP1() ('|' EXP1())* }
void EXP1(): {} { EXP2() ('&' EXP2())* }
void EXP2(): {} { EXP3() (RELOP() EXP3())? }
void EXP3(): {} { EXP4() (MULOP() EXP4())* }
void EXP4(): {} { EXP5() (ADDOP() EXP5())* }
void EXP5(): {} { EXP6() ('[' EXP() (':' EXP())? ']')? }
void EXP6(): {} { EXP7() ('.' ID())? }
void EXP7(): {} { LIT() | ID() | ARRAY() | OBJECT() | ANONFUN() | PROCCALL() | HASH() | BOOL() }
void LIT(): {} { T | F | NUMLIT() | STRLIT() }
void ARRAY(): {} { '[' EXP()* (',' EXP())* ']' }
void ARRAYREF(): {} { ID() '[' '.' | [0-9]+ (('..' | '...') [0-9]+)? ']' }
void OBJECT(): {} { }
void ANONFUN(): {} { 'f:{' (EXP() ('_'('_' | [0-9]+) EXP())*)* '}' }
void RELOP(): {} { '<' | '<=' | '==' | '!=' | '>=' | '>' }
void MULOP(): {} { '*' | '/' | '%' | '**' }
void ADDOP(): {} { '+' | '-' }
void REGEX(): {} {  }

void ARGS(): {} { EXP7() (',' EXP8())* }
void RANGE(): {} {  }

void ID(): {} { [a-Z]+([-_a-Z0-9])* }

void BOOL(): {} { 'T' | 'F' }
void NUMLIT(): {} { [0-9]+ ('.' [0-9]*)? }
void STRLIT(): {} { '"'  ( NUMLIT() | [a-Z])+  '"' }

void COMMENT(): {} { 'c:'  ( )*   NEWLINE() }
void BR(): {} { NEWLINE() | ';' }
void HASH(): {} { '#:{' (ID() '->' EXP()) (',' ID() '->' EXP())* '}' }




void S(): {} { E() <EOF>                                   }
void E(): {} { LOOKAHEAD(2) <ID> ":=" E() | T() ("+" T())* }
void T(): {} { F() ("*" F())*                              }
void F(): {} { <NUM> | <ID> | "(" E() ")"                  }
